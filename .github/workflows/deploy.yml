name: Firebase Deploy

on:
  release:
    types: [published]
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to deploy"
        required: true
        type: choice
        default: "all"
        options:
          - "staging"
          - "production"
      project:
        description: "Select project to deploy"
        required: true
        type: choice
        default: "all"
        options:
          - "all"
          - "gesture-firebase"
          - "gesture-firebase-user"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.release.target_commitish || github.ref_name }}
  cancel-in-progress: true

jobs:


  matrix-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: [1, 2, 3]  # Matrix of values to run jobs in parallel
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set an output for each matrix value
        id: set-output
        run: |
          echo "Output for value ${{ matrix.value }} is $((${{matrix.value}} * 2))"
          echo "CACHE_KEY=$((${{matrix.value}} * 2))" >> $GITHUB_OUTPUT

    outputs:
      value: ${{ steps.set-output.outputs.value }}  # Define the output to pass to the next job

  next-job:
    needs: matrix-job  # This ensures that the next job depends on the first job and its outputs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Display outputs from the matrix job
        run: |
          echo "Output from matrix job is: ${{ needs.matrix-job.outputs.value }}"


  define-env:
    name: Define Environment
    runs-on: ubuntu-latest
    outputs:
      app_env: ${{ steps.define-env.outputs.APP_ENV }}
      infisical_env: ${{ steps.define-env.outputs.INFISICAL_ENV }}
    steps:
      - name: Define environment
        id: define-env
        env:
          BRANCH_REF: ${{ github.ref }}
          BASE_REF: ${{ github.event.base_ref }}
          COMMITISH: ${{ github.event.release.target_commitish }}
          TAG_REF: ${{ github.ref }}
        run: |
          if [[ "$BRANCH_REF" == *"heads/production" ]] || 
             (([[ "$BASE_REF" == *"heads/production" ]] || 
             [[ "$COMMITISH" == "production" ]]) && 
             [[ "$TAG_REF" == refs/tags/v* ]]) ||
             [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "APP_ENV=production" >> "$GITHUB_OUTPUT"
            echo "INFISICAL_ENV=prod" >> "$GITHUB_OUTPUT"
          else
            echo "APP_ENV=staging" >> "$GITHUB_OUTPUT"
            echo "INFISICAL_ENV=staging" >> "$GITHUB_OUTPUT"
          fi

  lint:
    needs: define-env
    uses: ./.github/workflows/ci.yml
    with:
      source: ${{ github.event_name }}
      reference: ${{ github.event.release.tag_name || github.ref_name }}

  indexes:
    if: (startsWith(github.ref, 'refs/heads/staging')) || github.event.inputs.environment == 'staging'
    uses: ./.github/workflows/exportFirestoreIndexs.yml
    needs: lint
    permissions:
      contents: write
    with:
      source: ${{ github.event_name }}
      reference: ${{ github.event.release.tag_name || github.ref_name }}

  deploy:
    needs: [lint, define-env]
    strategy:
      matrix:
        project:
          - name: gesture-firebase
            sa-key-name: GESTURE_FIREBASE_SA_KEY
            staging-project: gesture-dev
            production-project: yourgestureapp
            inngest-url-key: INNGEST_SYNC_MAIN_URL
            functions: functions:businessV2,functions:crm,functions:events,functions:grunnerv3,functions:merchants,functions:life,functions:nina,functions:SmartSend,functions:social,functions:gservices_3,functions:vendors,functions:backups,functions:service_merchant_tasks,functions:service_merchant_user,functions:service_nina_3,functions:service_business_group_orders,functions:service_business_orders,functions:service_business_users,functions:service_grunner_users,functions:service_grunner_tasks,functions:service_vendor_users,functions:service_vendor_order,functions:db_backup,functions:copy_backups_to_s3,functions:rotate_infisical_variables,functions:service_consumer_users_location_history_oncreate,functions:export_grunners_to_csv,functions:inngest,functions:stripe
          - name: gesture-firebase-user
            sa-key-name: GESTURE_FIREBASE_USER_SA_KEY
            staging-project: gesture-dev-2
            production-project: gesture-user
            inngest-url-key: INNGEST_SYNC_USER_URL
            functions: functions:g3,functions:zoho_crm,functions:backups,functions:service_consumer_orders_3,functions:service_consumer_users_3,functions:db_backup,functions:copy_backups_to_s3,functions:inngest
    env:
      PROJECT_PATH: ${{ matrix.project.name }}/functions
      INFISICAL_ENV: ${{ needs.define-env.outputs.infisical_env }}
      SA_KEY: ${{ secrets[matrix.project.sa-key-name] }}
      APP_ENV: ${{ needs.define-env.outputs.app_env }}
    environment: ${{ needs.define-env.outputs.app_env }}
    runs-on: ubuntu-latest
    name: Deploy for ${{ matrix.project.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache node_modules
        # id: dependencies-cache
        # uses: actions/cache@v4
        # with:
        #   path: ${{ env.PROJECT_PATH }}/node_modules
        #   key: ${{ needs.lint.outputs.key. }}
        run: echo "value from lint ${{ toJson(needs.lint.outputs) }}"

      - name: Install project Dependencies
        run: |
          cd ${{ env.PROJECT_PATH }}
          npm ci

      - name: Install Firebase Tools
        run: npm install -g firebase-tools

      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical

      - name: Login to Infisical and export envs
        env:
          DEBUG_COMMAND: echo "${{ matrix.project.name }} env:" && grep -E "^[^ ]+ *=.*" "${{ env.PROJECT_PATH }}/.env" | cut -d"=" -f1
        # run: |
          # export INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=${{ secrets.INFISICAL_CLIENT_ID }} --client-secret=${{ secrets.INFISICAL_CLIENT_SECRET }} --silent --plain)
          # infisical export --env="${{ env.INFISICAL_ENV }}" --projectId=aea3c23d-9186-4645-a246-d35c6b438b3c --path="/${{ matrix.project.name }}" > ${{ env.PROJECT_PATH }}/.env
          # ${{ secrets.DEBUG == 'true' && env.DEBUG_COMMAND || 'echo ""' }}
        run: |
          echo "login infisical debug: ${{ env.DEBUG_COMMAND }}"

      - name: Firebase Google Auth
        # Run only on tagged release or when gesture-firebase is selected or all projects is selected
        # uses: google-github-actions/auth@v2
        # with:
        #   credentials_json: ${{ env.SA_KEY }}
        run: echo "use google-github-actions/auth@v2 with credentials_json ${{ env.SA_KEY }}"

      - name: Deploy firebase indexes
        env:
          PROJECT_KEY: ${{ env.APP_ENV }}-project
        # uses: ./.github/actions/deploy-firebase-indexes
        # with:
        #   project: ${{ matrix.project[env.PROJECT_KEY] }}
        #   path: "./${{ env.PROJECT_PATH }}"
        run: echo "Deploy firebase indexes project- ${{ matrix.project[env.PROJECT_KEY] }}  path- ${{ env.PROJECT_PATH }}"

      - name: Deploy Firebase Functions
        # Deploy only on push to staging or when gesture-firebase is selected or all projects is selected
        env:
          PROJECT_KEY: ${{ env.APP_ENV }}-project
        # run: |
        #   cd ${{ env.PROJECT_PATH }}
        #   firebase deploy --project=${{ matrix.project[env.PROJECT_KEY] }} --only ${{ matrix.project.functions }}
        run: echo "Deploy project-${{ matrix.project[env.PROJECT_KEY] }} --only ${{ matrix.project.functions }} "

      - name: Sync Inngest functions
        env:
          INNGEST_SYNC_URL: ${{ secrets[matrix.project.inngest-url-key] }}
        # run: |
        #   curl -sS --fail -X PUT ${{ env.INNGEST_SYNC_URL }} || (echo -e "\033[31mInngest sync failed! \033[0m" && exit 1)
        run: echo "Sync inngest url- ${{ env.INNGEST_SYNC_URL }}"
