name: EAS Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to Build'
        required: true
        type: choice
        default: 'all'
        options:
          - 'all'
          - 'android'
          - 'ios'
      submit:
        description: 'Submit build to App Store and/or Google Play'
        required: true
        type: boolean
        default: false

jobs:
  define-env:
    name: Define Environment
    runs-on: ubuntu-latest
    outputs:
      app_env: ${{ steps.define-env.outputs.APP_ENV }}
    steps:
      - name: Define environment
        id: define-env
        env:
          BRANCH_REF: ${{ github.ref }}
          BASE_REF: ${{ github.event.base_ref }}
          COMMITISH: ${{ github.event.release.target_commitish }}
          TAG_REF: ${{ github.ref }}
        run: |
          if [[ "$BRANCH_REF" == *"heads/production" ]] || 
             (([[ "$BASE_REF" == *"heads/production" ]] || 
             [[ "$COMMITISH" == "production" ]]) && 
             [[ "$TAG_REF" == refs/tags/v* ]]); then
            echo "APP_ENV=production" >> "$GITHUB_OUTPUT"
          else
            echo "APP_ENV=staging" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build to ${{ needs.define-env.outputs.app_env }}
    runs-on: ubuntu-latest
    needs: define-env
    environment: ${{ needs.define-env.outputs.app_env }}
    env:
      INFISICAL_PROJECT_ID: 593067cd-5aa1-4860-b02c-42ccc666e20c
      INFISICAL_PATH: /sub-folder
    steps:
      - name: 🏗 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🏗 Install dependencies
        run: echo "npm ci"

      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical

      - name: Prepare env
        env:
          PROFILE: ${{ needs.define-env.outputs.app_env }}
        run: |
          echo '{{$secrets := secret "${{ env.INFISICAL_PROJECT_ID }}" "${{ env.PROFILE }}" "${{ env.INFISICAL_PATH }}"}}
            {{$length := len $secrets}}
            {{- "{"}}
            {{- with $secrets }}
            {{- range $index, $secret := . }}
            "{{ $secret.Key }}": "{{ $secret.Value }}"{{if lt $index (minus $length 1)}},{{end}}
            {{- end }}
            {{- end }}
            {{ "}" -}}
          ' > template
          export INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=${{ secrets.INFISICAL_CLIENT_ID }} --client-secret=${{ secrets.INFISICAL_CLIENT_SECRET }} --silent --plain)
          infisical export --env="staging" --projectId="${{ env.INFISICAL_PROJECT_ID }}" --path="${{ env.INFISICAL_PATH }}" > .env
          infisical export --template="./template" > secrets.json
          jq \
            --arg profile "$PROFILE" \
            --argjson json "$(cat ./secrets.json)" \
            '.build[$profile].env = $json' eas.json > eas.json.tmp \
            && mv eas.json.tmp eas.json
          sed -i '/\*.env/d' .gitignore
          sed -i 's/"requireCommit": true/"requireCommit": false/' eas.json
          cat .gitignore
          cat eas.json

      - name: 🏗 Setup Expo and EAS
        run: echo "expo login"
        # uses: expo/expo-github-action@v8
        # with:
        #   eas-version: latest
        #   token: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Build app (Staging)
        if: needs.define-env.outputs.app_env == 'staging'
        run: |
          echo "build to staging"

      - name: 🚀 Build app (Production)
        if: needs.define-env.outputs.app_env == 'production'
        run: |
          echo "build to production"